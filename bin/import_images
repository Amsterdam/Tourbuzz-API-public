#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

session_start();

// Instantiate the app
$settings = require __DIR__ . '/../src/settings.php';
$app = new \Slim\App($settings);

// Set up dependencies
require __DIR__ . '/../src/dependencies.php';

// Register middleware
require __DIR__ . '/../src/middleware.php';

if (count($argv) !== 3) {
    die('Usage php import_images [messages.json] [imageDir]');
}

if (!is_dir($argv[2])) {
    die('the directory specified does not exist: '. $argv[2]);
}

require __DIR__ . '/../src/entity/Bericht.php';

$container  = $app->getContainer();
/**
 * @var \Doctrine\ORM\EntityManager $em
 */
$em         = $container->get('em');
/**
 * #@var \App\Service\ImageStoreService $imageStore
 */
$imageStore = $container->get('imageStore');
$imageStore->setRootPath('public/images/');
importImages($argv[1], $argv[2], $em, $imageStore);



function importImages($filePath, $imageDir, \Doctrine\ORM\EntityManager $em, \App\Service\ImageStoreService $imageStore) {
    $messages = loadMessages($filePath);
    $messages = migrateMessages($messages);
    $repo = $em->getRepository('App\Entity\Bericht');

    foreach ($messages as $obj) {

        $bericht = $repo->findOneByOldId($obj->id);
        if (null === $bericht) {
            continue;
        }

        $image = str_replace('http://api.fixxx.nl/afbeeldingen/','', $obj->image_url);
        if (strlen($image)) {
            $imageInfo = new \SplFileInfo($imageDir . '/' . $image);
            $imageObj  = $imageStore->store($imageInfo);
            $bericht->setImageId($imageObj->getId());
        }

        $em->persist($bericht);
    }
    $em->flush();
}




/** Methods from the old api */


function migrateMessages($messages) {
    // If link is available, and it is a link to google maps
    // Get location geo information.
    $migrated = false; // Something changed and needs to be saved.
    $messages = array_map(function ($message) use (&$migrated) {
        if (preg_match("/goo\.gl/", $message->link)) {
            $ch = curl_init($message->link);
            curl_setopt($ch, CURLOPT_NOBODY, 1);
            $rs = curl_exec($ch);
            $link_info = curl_getinfo($ch, CURLINFO_REDIRECT_URL);
            $matches = [];
            preg_match("/@([0-9.]*),([0-9.]*),/", $link_info, $matches);
            if (!empty($matches[1]) && !empty($matches[2])) {
                $message->location_lat = $matches[1];
                $message->location_lng = $matches[2];
            }
            preg_match("/\?q=([0-9.]*),([0-9.]*)&/", $link_info, $matches);
            if (!empty($matches[1]) && !empty($matches[2])) {
                $message->location_lat = $matches[1];
                $message->location_lng = $matches[2];
            }
            $message->link = "";
            $migrated = true; // Something changed and needs to be saved.
        } else if (preg_match("/google\..*\/maps\//", $message->link)) {
            $matches = [];
            preg_match("/@([0-9.]*),([0-9.]*),/", $message->link, $matches);
            if (!empty($matches[1]) && !empty($matches[2])) {
                $message->location_lat = $matches[1];
                $message->location_lng = $matches[2];
            }
            $message->link = "";
            $migrated = true; // Something changed and needs to be saved.
        }
        if (!is_bool($message->include_map)) {
            $message->include_map = true;
            $migrated = true;
        }
        return $message;
    }, $messages);
    if ($migrated) {
        saveMessages($messages);
    }
    return $messages;
}

function loadMessages($filePath) {
    $messagesJson = file_get_contents($filePath);
    $messages = json_decode($messagesJson);
    if (!$messages) {
        $messages = []; // FIXME backup here?
    }
    $messages = (array) $messages;
    return $messages;
}

function saveMessages($messages) {
    global $filePath;
    backupMessagesFile();
    if (!is_array($messages)) {
        throw new Exception("Cannot store messages; Format invalid (needs to be an array).");
    }
    $messages = indexMessages($messages); //FIXME remove this later.
    file_put_contents($filePath, json_encode($messages));
}

function indexMessages($messages) {
    return array_combine(
        array_map(function ($message) {
            return $message->id;
        }, $messages),
        array_values($messages)
    );
}

function backupMessagesFile($filePath) {
    $backupFilePath = $filePath . ".backup." . date("Y-m-d");
    if (!file_exists($backupFilePath)) {
        copy($filePath, $backupFilePath);
    }
}